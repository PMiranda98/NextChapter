using GatewayService.Middleware;
using Microsoft.AspNetCore.Authentication.JwtBearer;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddReverseProxy().LoadFromConfig(builder.Configuration.GetSection("ReverseProxy"));

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                .AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =>
                {
                    options.Authority = builder.Configuration["IdentityServiceUrl"];
                    options.RequireHttpsMetadata = false;
                    options.TokenValidationParameters.ValidateAudience = false;
                    options.TokenValidationParameters.NameClaimType = "username";
                });

builder.Services.AddCors(corsOpt =>
{
    corsOpt.AddPolicy("customPolicy", corsPolicyBuilder =>
    {
        corsPolicyBuilder.AllowAnyHeader().AllowAnyMethod().WithOrigins(builder.Configuration["ClientApp"]);
    });
});

var app = builder.Build();

// It is best practice to put this at the top of the pipeline so that it can catch exceptions generated by middleware below.
app.UseMiddleware<ExceptionMiddleware>();

app.UseCors();

app.MapReverseProxy();

app.UseAuthentication();
app.UseAuthorization();

app.Run();
